import os
import pickle
import numpy as np
import torch
import cv2

def draw_multi_box(img, box_coordinates):
    point_color1 = (255, 255, 0)  # BGR
    point_color2 = (255, 0, 255)  # BGR
    thickness = 2
    lineType = 4
    for i in range(len(box_coordinates)):
        center = (box_coordinates[i, 1].item(), box_coordinates[i, 2].item())
        size = (box_coordinates[i, 3].item(), box_coordinates[i, 4].item())
        angle = box_coordinates[i, 5].item()
        box = cv2.boxPoints((center, size, angle))
        box = np.int64(box)
        cv2.line(img, box[0], box[3], point_color1, thickness, lineType)
        cv2.line(img, box[3], box[2], point_color2, thickness, lineType)
        cv2.line(img, box[2], box[1], point_color1, thickness, lineType)
        cv2.line(img, box[1], box[0], point_color2, thickness, lineType)
    cv2.imshow("Image", img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


files = ['/home/anvd2aic/Desktop/robotic-grasping/demo/demo.png']

chosen_files = np.random.choice(files, 1)
for file in chosen_files:
    img = cv2.imread(file)

    all_grasp = []

    grasp = [
# [# 0.9796353578567505,
#   83.41270446777344,
#   121.6759033203125,
#   80.0343017578125,
#   17.54443359375,
#   4.368591785430908],
#  [0.9986737966537476,
#   89.4701919555664,
#   116.14293670654297,
#   72.6180648803711,
#   15.728190422058105,
#   10.068824768066406],
#  [0.9661968350410461,
#   92.96734619140625,
#   112.15811157226562,
#   76.23768615722656,
#   15.483963012695312,
#   80.00479125976562],
#  [0.9960010647773743,
#   89.70629119873047,
#   118.96912384033203,
#   73.6650619506836,
#   16.31721305847168,
#   173.39259338378906],
#  [0.9511023759841919,
#   82.56790924072266,
#   133.752197265625,
#   72.24271392822266,
#   16.4348087310791,
#   1.7014447450637817],
#  [0.9808896780014038,
#   89.89899444580078,
#   131.75379943847656,
#   64.13199615478516,
#   16.62262535095215,
#   0.6981101632118225],
#  [0.9965292811393738,
#   92.38688659667969,
#   133.2610321044922,
#   66.97721862792969,
#   15.383416175842285,
#   170.75244140625],
 [0.9958141446113586,
  146.70184326171875,
  174.737060546875,
  67.39501953125,
  17.855594635009766,
  155.80015563964844],
 [0.9936361312866211,
  155.8765106201172,
  188.16314697265625,
  66.52122497558594,
  14.344877243041992,
  2.0206995010375977],
#  [0.9590572118759155,
#   159.3105926513672,
#   187.06683349609375,
#   60.89908981323242,
#   15.611431121826172,
#   99.03559112548828],
 [0.9989033937454224,
  155.6435089111328,
  188.4197998046875,
  64.05577850341797,
  15.97778034210205,
  159.46766662597656],
 [0.9983487129211426,
  159.4503173828125,
  202.4889678955078,
  67.86882781982422,
  15.814057350158691,
  0.027501054108142853],
#  [0.999929666519165,
#   159.00262451171875,
#   205.65127563476562,
#   63.6278076171875,
#   16.319536209106445,
#   168.88331604003906],
#  [0.9866703152656555,
#   172.9873046875,
#   237.2386016845703,
#   78.36557006835938,
#   18.754762649536133,
#   0.011052348650991917],
#  [0.9999139308929443,
#   175.08087158203125,
#   238.21173095703125,
#   68.28839874267578,
#   16.51504898071289,
#   159.61509704589844],
#  [0.9976703524589539,
#   183.09083557128906,
#   253.18482971191406,
#   68.25724792480469,
#   16.85689926147461,
#   143.2447509765625],
#  [0.9818118214607239,
#   178.41444396972656,
#   257.1800231933594,
#   69.8788833618164,
#   16.29911994934082,
#   156.37744140625],
#  [0.9952784776687622,
#   198.79983520507812,
#   268.7130432128906,
#   88.25181579589844,
#   16.086872100830078,
#   0.44907307624816895],
#  [0.9885730743408203,
#   203.8522491455078,
#   266.7431335449219,
#   67.28367614746094,
#   14.863351821899414,
#   116.34074401855469],
#  [0.9999798536300659,
#   201.5097198486328,
#   268.2736511230469,
#   67.65840148925781,
#   15.97208309173584,
#   141.07022094726562],
#  [0.9972831010818481,
#   213.94033813476562,
#   284.56195068359375,
#   62.33521270751953,
#   15.849599838256836,
#   135.97610473632812],
#  [0.9815255403518677,
#   210.21408081054688,
#   289.5197448730469,
#   66.60193634033203,
#   15.759256362915039,
#   160.3994903564453],
#  [0.9660593271255493,
#   227.2901611328125,
#   299.0444030761719,
#   94.18994903564453,
#   15.185857772827148,
#   0.4503091275691986],
#  [0.9998964071273804,
#   229.99636840820312,
#   296.71429443359375,
#   68.58586883544922,
#   16.030126571655273,
#   137.76524353027344],
#  [0.9912281036376953,
#   246.787353515625,
#   315.6818542480469,
#   61.38090133666992,
#   15.909278869628906,
#   132.91644287109375],
#  [0.9534029960632324,
#   241.8212432861328,
#   322.78192138671875,
#   57.58720779418945,
#   13.431159973144531,
#   166.33218383789062],
#  [0.9996960163116455,
#   260.0401611328125,
#   324.89202880859375,
#   65.53797912597656,
#   15.333538055419922,
#   137.5283966064453],
#  [0.9921084046363831,
#   280.6942138671875,
#   342.9196472167969,
#   59.09550476074219,
#   14.950201988220215,
#   134.00057983398438],
#  [0.9770687222480774,
#   297.6766357421875,
#   357.5155334472656,
#   64.83418273925781,
#   15.006793975830078,
#   138.65066528320312]]
    ]
    print(grasp)
    all_grasp += grasp

    all_grasp = torch.tensor(all_grasp)
    draw_multi_box(img, all_grasp)
